package styling

// Elements which are hard-coded and not designed to use a lot
// Any color change is manual

templ AnimatedText(text string) {
    <div class="animtext">
        <svg width="100%" height="100%">
            <text x="50%" y="70%" text-anchor="middle">
                {text}
            </text>
        </svg>
    </div>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Comic+Relief:wght@400;700&family=Lora:ital,wght@0,400..700;1,400..700&family=Quicksand:wght@300..700&display=swap');
        body {
            margin: 0;
        }
        .animtext {
            width: 95vw;
        }
        svg text {
            font-family: Comic Relief;
            letter-spacing: 10px;
            stroke: #6a942f;
            font-size: 100px;
            font-weight: 700;
            stroke-width: 3;
            animation: textAnimate 8s infinite alternate;
        }
        @keyframes textAnimate {
            0% {
                stroke-dasharray: 0 50%;
                stroke-dashoffset: 20%;
                fill:hsl(209, 35%, 36%);
            }
            100% {
                stroke-dasharray: 50% 0;
                stroke-dashoffset: -20%;
                fill: hsla(205.8, 45.87%, 42.75%, 0%);
            }
        }
    </style>
}

templ NoiseEffect() {
    <div class="noise"></div>
    <style>
        .noise {
            background-image:url("https://upload.wikimedia.org/wikipedia/commons/7/76/1k_Dissolve_Noise_Texture.png");
            height: 300%;
            width: 300%
        }

        .noise::after{
        content: "";
        background-position: center;
        background-image:url("https://upload.wikimedia.org/wikipedia/commons/7/76/1k_Dissolve_Noise_Texture.png");
        height: 300%;
        width: 300%;
        position: fixed;
        opacity:0.05;
        z-index: -1;
        animation: animateGrain 8s steps(10) infinite;
        }

        @keyframes animateGrain{
        0%, 100% { transform:translate(0, 0) }
        10%{
            transform:translate(-5%,-10%)
        }
        20%{
            transform:translate(-15%,-20%)
        }
        30%{
            transform:translate(-5%,-10%)
        }
        40%{
            transform:translate(-15%,-20%)
        }
        
        50%{
            transform:translate(-5%,-10%)
        }
        60%{
            transform:translate(-15%,-20%)
        }
        70%{
            transform:translate(-5%,-10%)
        }
        80%{
            transform:translate(-15%,-20%)
        }
        90%{
            transform:translate(-5%,-10%)
        }
        100%{
            transform:translate(-15%,-20%)
        }
        
        }
    </style>
}